---
description: 
globs: src/**/*.ts,src/**/*.tsx,src/**/*.d.ts,src/**/*.astro
alwaysApply: false
---
# Coding Standards & Refactoring

## ✨ Code Quality & Style

1.  **TypeScript Guidelines:** Use strict typing (avoid `any`). Check [tsconfig.json](mdc:tsconfig.json). Document complex logic or public APIs with JSDoc.
2.  **Readability & Maintainability:** Write clean, well-organized code.
3.  **Small Files & Components:**
    - Keep files under **300 lines**. Refactor proactively.
    - Break down large React components (`.tsx` files in `src/components/`) into smaller, single-responsibility components.
4.  **Avoid Duplication (DRY):** Actively look for and reuse existing functionality. Refactor to eliminate duplication.
5.  **Linting/Formatting:** Ensure all code conforms to project's ESLint/Prettier rules defined in [package.json](mdc:package.json) scripts and configuration files like [.prettierrc](mdc:.prettierrc) and potentially [.coderabbit.yaml](mdc:.coderabbit.yaml). Run `bun format` and `bun lint`.
6.  **Pattern Consistency:** Adhere to established project patterns outlined in [docs/TECHNICAL.md](mdc:docs/TECHNICAL.md). Don't introduce new ones without discussion/explicit instruction. If replacing an old pattern, ensure the old implementation is fully removed.
7.  **File Naming:** Use clear, descriptive names. `PascalCase` for components (`.astro`, `.tsx`), `camelCase` or `kebab-case` for utilities/services (`.ts`). Avoid "temp", "refactored", "improved", etc., in permanent file names.
8.  **No One-Time Scripts:** Do not commit one-time utility scripts into the main codebase.

## ♻️ Refactoring

1.  **Purposeful Refactoring:** Refactor to improve clarity, reduce duplication, simplify complexity, or adhere to architectural goals ([docs/ARCHITECTURE.md](mdc:docs/ARCHITECTURE.md)).
2.  **Holistic Check:** When refactoring, look for duplicate code, similar components/files, and opportunities for consolidation across the affected area.
3.  **Edit, Don't Copy:** Modify existing files directly. Do not duplicate files and rename them (e.g., `component-v2.tsx`).
4.  **Verify Integrations:** After refactoring, ensure all callers, dependencies, and integration points function correctly. Run relevant tests (`bun test`, `bun test:e2e`).
