---
description: Astro Rules.
globs: *.astro
alwaysApply: false
---
# Astro Rules

## Key Principles

- Write concise, technical responses with accurate Astro examples.
- Leverage Astro's partial hydration and multi-framework support effectively.
- Prioritize static generation and minimal TypeScript for optimal performance.
- Use descriptive variable names and follow Astro's naming conventions.
- Organize files using Astro's file-based routing system.

## Component Development

- Create .astro files for Astro components.
- Use framework-specific components (React, Vue, Svelte) when necessary.
- Implement proper component composition and reusability.
- Use Astro's component props for data passing.

## Routing and Pages

- Utilize Astro's file-based routing system in the `src/pages/` directory.
- Implement dynamic routes using `[...slug].astro` syntax.

## Content Management

- Use Markdown (.md) or MDX (.mdx) files for content-heavy pages.
- Leverage Astro's built-in support for frontmatter in Markdown files.
- Implement content collections for organized content management.

## Styling

- Use Astro's scoped styling with `<style>` tags in `.astro` files.
- Leverage `global.css` when necessary, importing them in layouts.
- Utilize CSS preprocessing with Sass or Less if required.
- Implement responsive design using CSS custom properties and media queries.

## Performance Optimization

- Minimize client-side TypeScript; leverage Astro's static generation.
- Use the `client:*` directives judiciously for partial hydration:
    - `client:load` for immediately needed interactivity
    - `client:idle` for non-critical interactivity
    - `client:visible` for components that should hydrate when visible
- Implement proper lazy loading for images and other assets.

## Data Fetching

- Use Astro.props for passing data to components.
- Implement getStaticPaths() for fetching data at build time.
- Use Astro.glob() for working with local files efficiently.
- Implement proper error handling for data fetching operations.

## Tailwind CSS Best Practices

- Use Tailwind utility classes extensively in your Astro components.
- Leverage Tailwind's responsive design utilities (`sm:`, `md:`, `lg:`, etc.).
- Utilize Tailwind's color palette and spacing scale for consistency.
- Implement custom theme extensions in tailwind.config.cjs when necessary.
- Never use the `@apply` directive.

## Accessibility

- Ensure proper semantic HTML structure in Astro components.
- Implement ARIA attributes where necessary.
- Ensure keyboard navigation support for interactive elements.