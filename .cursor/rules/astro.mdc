---
description: Astro Rules.
globs: *.astro,*astro.config.mjs,*tailwind.config.cjs,*.css
alwaysApply: false
---
# Astro Rules

## Key Principles

- Write concise, technical responses with accurate Astro examples.
- Leverage Astro's partial hydration (`client:*` directives) and multi-framework support effectively.
- Prioritize static generation (`output: 'static'`) and minimal client-side TypeScript for optimal performance. See [astro.config.mjs](mdc:apps/website/astro.config.mjs).
- Use descriptive variable names and follow Astro's naming conventions (`PascalCase` for components).
- Organize files using Astro's file-based routing system within `apps/website/src/`.

## Component Development

- Create `.astro` files for Astro components in `apps/website/src/components/`.
- Use framework-specific components (React `.tsx`, Vue `.vue`, Svelte `.svelte`) when necessary, placing them alongside or within relevant component directories.
- Implement proper component composition and reusability.
- Use Astro's component props (`Astro.props`) for data passing.

## Routing and Pages

- Utilize Astro's file-based routing system in the `apps/website/src/pages/` directory.
- Implement dynamic routes using bracket notation (e.g., `[slug].astro`, `[...path].astro`).
- Define layouts in `apps/website/src/layouts/` and apply them to pages.

## Content Management

- Use Markdown (`.md`) or MDX (`.mdx`) files for content-heavy pages, typically within `apps/website/src/content/` or `apps/website/src/pages/`.
- Leverage Astro's built-in support for frontmatter in Markdown/MDX files.
- Implement content collections (defined in `apps/website/src/content/config.ts`) for organized content management.

## Styling

- Use Astro's scoped styling with `<style>` tags in `.astro` files.
- Utilize global stylesheets (e.g., `apps/website/src/styles/global.css`) by importing them in layouts or page entry points.
- Adhere to Tailwind CSS best practices (see specific Tailwind rule if available).

## Performance Optimization

- Minimize client-side TypeScript; leverage Astro's static generation or server-side rendering (`output: 'server'` or `'hybrid'`) where appropriate ([astro.config.mjs](mdc:apps/website/astro.config.mjs)).
- Use the `client:*` directives judiciously for partial hydration:
  - `client:load` for immediately needed interactivity.
  - `client:idle` for non-critical interactivity loading after page load.
  - `client:visible` for components that should hydrate when they enter the viewport.
  - `client:media` for components hydrating based on a media query.
  - `client:only` for framework components that render _only_ on the client.
- Implement proper lazy loading for images (`loading="lazy"`) and other assets.

## Data Fetching

- Pass data to components via `Astro.props`.
- Use top-level `await` within `.astro` files for fetching data at build or request time.
- Implement `getStaticPaths()` in dynamic route pages (`.astro`) for generating pages from data at build time when using `output: 'static'`.
- Use `Astro.glob()` for working with local files (like Markdown content) efficiently.
- Implement proper error handling (e.g., `try...catch`) for data fetching operations.

## Tailwind CSS Best Practices (in Astro)

- Use Tailwind utility classes directly within the `class` attribute of HTML elements in `.astro` and framework components.
- Leverage Tailwind's responsive design utilities (`sm:`, `md:`, `lg:`, etc.).
- Utilize Tailwind's color palette and spacing scale defined in @tailwind.stency.
- Avoid the `@apply` directive in favor of component composition or utility classes.

## Accessibility (A11y)

- Ensure proper semantic HTML structure in Astro components.
- Implement ARIA attributes where necessary to enhance accessibility.
- Ensure keyboard navigation support for all interactive elements.
