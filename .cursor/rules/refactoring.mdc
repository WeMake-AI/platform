---
description: Refactoring Guidelines
globs: 
alwaysApply: false
---
# Refactoring Guidelines

## ♻️ Principles of Refactoring

1.  **Purposeful Refactoring:** Refactor code with a clear goal: improve clarity, reduce duplication (DRY), simplify complexity, enhance performance, or align with architectural goals (e.g., extracting shared logic to `packages/`). Avoid refactoring for the sake of refactoring.
2.  **Small, Incremental Steps:** Break down large refactoring tasks into smaller, manageable, and testable steps. Commit frequently (see [workflow.mdc](mdc:.cursor/rules/workflow.mdc)).
3.  **Behavior Preservation:** Refactoring should primarily change the internal structure of the code, _not_ its external behavior. Ensure existing functionality remains unchanged unless the goal is explicitly to modify behavior (which might be a feature change rather than pure refactoring).

## Process

1.  **Identify Scope:** Clearly define the scope of the refactoring. What code needs to be changed? What are the potential impacts?
2.  **Ensure Test Coverage:** Before starting significant refactoring, ensure adequate test coverage exists for the code being modified (see [testing.mdc](mdc:.cursor/rules/testing.mdc)). Write tests if needed _before_ refactoring.
3.  **Holistic Check:** When refactoring, look beyond the immediate lines of code. Check for:
    - Duplicate code nearby or elsewhere in the codebase.
    - Similar components, functions, or files that could be consolidated.
    - Opportunities to move logic to shared `packages/` if it's generally applicable (see [monorepo.mdc](mdc:.cursor/rules/monorepo.mdc)).
4.  **Edit, Don't Copy:** Modify existing files directly. **Do not** duplicate files and rename them (e.g., `component-v2.tsx`, `old_function.ts`). Use Git history to track changes.
5.  **Verify Changes:** After each refactoring step:
    - Run relevant tests (`bun test`, `bun test:e2e`).
    - Manually check impacted areas, especially UI components or critical flows.
    - Ensure all callers, dependencies (within the monorepo and external), and integration points function correctly.
    - Check for linting errors (`bun lint`) and formatting issues (`bun format`).
6.  **Clean Up:** Remove any dead code, commented-out blocks, or temporary logging introduced during the refactoring process before committing the final changes.
