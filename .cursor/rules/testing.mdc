---
description: Testing Guidelines
globs: 
alwaysApply: false
---
# Testing Guidelines

## âœ… Testing & Validation Strategy

1.  **Test-Driven Development (TDD) Mindset:**
    - **New Features:** Aim to outline tests first, write failing tests capturing requirements, implement the code to make tests pass, and finally refactor.
    - **Bug Fixes:** Before fixing a bug, write a test that reproduces the bug and fails. The fix is complete when this test passes.
2.  **Test Coverage:** Write tests covering critical application paths, core logic, component interactions, edge cases, and expected error handling. Focus on testing the _behavior_ rather than the implementation details.
3.  **Test Types & Tools:**
    - **Unit Tests (Vitest):** Test individual functions, components, or modules in isolation. Place these tests close to the code they test (e.g., `*.test.ts` or `*.spec.ts` files) or in a central `tests/unit` directory. Use mocking/stubbing for external dependencies.
    - **Integration Tests (Vitest):** Test the interaction between multiple units or components. These might live in `tests/integration`.
    - **End-to-End (E2E) Tests (Playwright):** Test complete user flows through the application interface, simulating real user interactions in a browser. Place these in `tests/e2e`.
4.  **Running Tests:** All relevant tests **must** pass before committing code or considering a task complete.
    - Run all tests: `bun test` (likely runs unit/integration)
    - Run E2E tests: `bun test:e2e` (check [package.json](mdc:package.json) for exact scripts)
    - Notify collaborators immediately if tests fail unexpectedly and the fix isn't obvious.
5.  **Mocking:**
    - Use mock data, stubs, or spies **only** within test environments (unit and integration tests primarily).
    - Avoid mocks in E2E tests where possible to test the real integrated system. If necessary, mock external services at the network level.
    - Ensure development (`bun dev`) and production environments use real data sources or realistic seeded data.
6.  **Manual Verification:** Supplement automated tests with manual checks, especially for:
    - **UI/UX changes:** Visual appearance, responsiveness across different screen sizes, usability.
    - **Complex flows:** Scenarios difficult to automate reliably.
7.  **Test Maintenance:** Keep tests up-to-date with code changes. Remove or update tests for removed or refactored features. Ensure tests remain fast and reliable.
